generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LoginSource {
  PASSWORD
  GOOGLE
}

enum OauthProfile {
  GOOGLE
}

enum Scope {
  EMAIL
  PROFILE
  CALENDAR
  DRIVE
  FORM
  SHEETS
  SLIDES
  DOCS
  GMAIL
  OPENID
}

enum Frequency {
  HOURLY
  WEEKLY
  DAILY
  MONTHLY
}

enum PlatformRole {
  ADMIN
  USER
  CONTACT
}

enum OrgRole {
  ADMIN
  MANAGER
  TEAM_MEMBER
}

enum OfferingType {
  PRODUCT
  SERVICE
}

enum PaymentStatus {
  SUCCESS
  REJECTED
}

enum SalesFunnelStage {
  CONTACT
  LEAD
  QUALIFIED_LEAD
  PROSPECT
  OPPORTUNITY
  PROPOSAL_SENT
  NEGOTIATION
  ONBOARDING
  CUSTOMER
  ACTIVE_CUSTOMER
  LOYAL_CUSTOMER
  AT_RISK_CUSTOMER
  CHURNED_CUSTOMER
  ADVOCATE
}

enum SubscriptionStatus {
  CREATED
  ACTIVE
  PAUSED
  CANCELLED
}

enum ServiceRequestStatus {
  CREATED
  DISCOVERY
  REJECTED
  ADVANCE_DUE
  ONGOING
  FIRST_REVIEW_DUE
  FIRST_CHANGES_ONGOING
  SECOND_REVIEW_DUE
  SECOND_CHANGES_ONGOING
  BALANCE_DUE
  COMPLETED
}

enum Industry {
  AGRICULTURE_FORESTRY_FISHING
  MINING_QUARRYING
  MANUFACTURING
  ELECTRICITY_GAS_STEAM_AIR_CONDITIONING
  WATER_SUPPLY_SEWERAGE_WASTE_MANAGEMENT
  CONSTRUCTION
  WHOLESALE_RETAIL_TRADE
  TRANSPORTATION_STORAGE
  ACCOMMODATION_FOOD_SERVICE
  PUBLISHING_BROADCASTING_CONTENT_PRODUCTION
  TELECOMMUNICATIONS_IT_SERVICES
  FINANCIAL_INSURANCE
  REAL_ESTATE
  PROFESSIONAL_SCIENTIFIC_TECHNICAL
  ADMINISTRATIVE_SUPPORT
  PUBLIC_ADMINISTRATION_DEFENCE
  EDUCATION
  HUMAN_HEALTH_SOCIAL_WORK
  ARTS_SPORTS_RECREATION
  OTHER_SERVICES
  HOUSEHOLD_ACTIVITIES
  EXTRATERRITORIAL_ORGANIZATIONS
}

model Token {
  id           String      @id @default(cuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  scope        Scope[]
  accessToken  String
  refreshToken String
  sessions     Session[]   @relation("Token to session mapping")
  loginSource  LoginSource
}

model User {
  id                       String           @id @default(cuid())
  email                    String           @unique
  firstName                String
  lastName                 String
  phoneNumber              String?
  platformRole             PlatformRole     @default(CONTACT)
  organisation             String?
  orgRole                  OrgRole?         @default(TEAM_MEMBER)
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  createdSolutions         Solution[]
  password                 String?
  oAuthProfile             OauthProfile?
  sessions                 Session[]
  userSlots                Slot[]           @relation("User to slot mapping")
  hostSlots                Slot[]           @relation("Host to slot mapping")
  currencies               Currency[]
  feedbacks                Feedback[]       @relation("User to feedback mapping")
  feedbacksVerified        Feedback[]       @relation("Verified feedback to admin mapping")
  teamMemberOrganisation   Organisation?    @relation("Team members to org mapping", fields: [teamMemberOrganisationId], references: [id])
  teamMemberOrganisationId String?
  cancelledSlots           Slot[]           @relation("Cancelled slots to user mapping")
  tokens                   Token[]
  orgContacts              Contact[]
  subscriptions            Subscription[]
  serviceRequests          ServiceRequest[]
  activities               Activity[]
}

model Contact {
  id               String            @id @default(cuid())
  user             User              @relation(fields: [userId], references: [id])
  userId           String
  organisationId   String
  organisation     Organisation      @relation("Contact to org mapping", fields: [organisationId], references: [id])
  salesFunnelStage SalesFunnelStage?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  serviceRequests  ServiceRequest[]
  activities       Activity[]
}

model Currency {
  id            String    @id @default(cuid())
  name          String
  shortform     String
  symbol        String
  inrConversion Int
  isDisabled    Boolean?
  createdBy     User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Pricing       Pricing[]
}

model Pricing {
  id                      String           @id @default(cuid())
  currency                Currency         @relation(fields: [currencyId], references: [id])
  currencyId              String
  basePrice               Int
  discountPercentage      Int?
  baseUserCount           Int?
  frequency               Frequency?
  additionalUserUnitPrice Int?
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  subscriptionPlan        SubscriptionPlan @relation("Subscription Plan to Pricing mapping", fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId      String           @unique
  freeTrial               Boolean?
  freeTrialPeriodMonths   Int?
}

model Solution {
  id                String             @id @default(cuid())
  createdBy         User               @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById       String
  title             String
  description       String
  offerings         Offering[]
  isDisabled        Boolean?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  categoryId        String
  subscriptionPlans SubscriptionPlan[] @relation("Subscription Plan to solution mapping")
}

model SubscriptionPlan {
  id                String         @id @default(cuid())
  title             String
  solutionId        String?
  solution          Solution?      @relation("Subscription Plan to solution mapping", fields: [solutionId], references: [id], onDelete: Cascade)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  pricingId         String?        @unique
  pricing           Pricing?       @relation("Subscription Plan to Pricing mapping")
  includedOfferings Offering[]     @relation("Subscription Plan to Offering Mapping")
  subscriptions     Subscription[] @relation("Subscription Plan to subscription mapping")
}

model Payment {
  id             String        @id @default(cuid())
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
  baseAmount     Int
  GST            Float?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  status         PaymentStatus
  invoice        Invoice?      @relation
  invoiceId      String?
}

model Invoice {
  id        String   @id @default(cuid())
  payment   Payment  @relation(fields: [paymentId], references: [id])
  paymentId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id                 String             @id @default(cuid())
  subscriptionPlan   SubscriptionPlan   @relation("Subscription Plan to subscription mapping", fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  organisationId     String?
  organisation       Organisation?      @relation(fields: [organisationId], references: [id])
  userId             String?
  user               User?              @relation(fields: [userId], references: [id])
  payments           Payment[]
  status             SubscriptionStatus @default(CREATED)
}

model Offering {
  id                String             @id @default(cuid())
  offeringType      OfferingType
  solutionId        String
  solution          Solution           @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  title             String
  details           String[]
  serviceRequest    ServiceRequest[]
  isDisabled        Boolean?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  feedbackList      Feedback[]         @relation("Feedback to offering mapping")
  subscriptionPlans SubscriptionPlan[] @relation("Subscription Plan to Offering Mapping")
}

model Session {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokens     Token[]  @relation("Token to session mapping")
  createdAt  DateTime @default(now())
  endsAt     DateTime
  lastActive DateTime @updatedAt

  @@unique([userId])
}

model ServiceRequest {
  id             String               @id @default(cuid())
  contactId      String?
  offeringId     String
  contact        Contact?             @relation(fields: [contactId], references: [id], onDelete: Cascade)
  offering       Offering             @relation(fields: [offeringId], references: [id], onDelete: Cascade)
  slot           Slot?
  description    String?
  subject        String
  isDisabled     Boolean?
  status         ServiceRequestStatus @default(CREATED)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  User           User?                @relation(fields: [userId], references: [id])
  userId         String?
  organisationId String?
  organisation   Organisation?        @relation(fields: [organisationId], references: [id])

  @@unique([contactId, offeringId])
}

model Slot {
  id                 String          @id @default(cuid())
  userId             String?
  user               User?           @relation("User to slot mapping", fields: [userId], references: [id], onDelete: Cascade)
  hostId             String
  host               User            @relation("Host to slot mapping", fields: [hostId], references: [id], onDelete: Cascade)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  timestamp          DateTime
  meetingLink        String?
  serviceRequest     ServiceRequest? @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  serviceRequestId   String?         @unique
  calendarEventId    String?
  isCancelled        Boolean?
  cancellationReason String?
  cancelledBy        User?           @relation("Cancelled slots to user mapping", fields: [cancelledById], references: [id])
  cancelledById      String?
}

model Feedback {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation("User to feedback mapping", fields: [userId], references: [id], onDelete: Cascade)
  rating       Int
  testimonial  String
  improvements String[]
  offering     Offering? @relation("Feedback to offering mapping", fields: [offeringId], references: [id])
  offeringId   String?
  isApproved   Boolean?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  verifiedById String
  verifiedBy   User      @relation("Verified feedback to admin mapping", fields: [verifiedById], references: [id])
}

model Organisation {
  id              String           @id @default(cuid())
  industry        Industry
  description     String?
  name            String
  teamMembers     User[]           @relation("Team members to org mapping")
  contacts        Contact[]        @relation("Contact to org mapping")
  address         String
  city            String
  state           String
  country         String
  zipCode         String
  subscriptions   Subscription[]
  serviceRequests ServiceRequest[]
}

model Activity {
  id                  String       @id @default(cuid())
  contact             Contact?     @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId           String?
  user                User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String?
  activityType        ActivityType
  subject             String
  notes               String?
  activityDate        DateTime
  isFollowUp          Boolean      @default(false)
  followUpFrequency   Frequency?
  customFrequencyDays Int?
  nextFollowUp        DateTime?
  completed           Boolean      @default(false)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  FOLLOW_UP
  NOTE
  TASK
}
