generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LoginSource {
  PASSWORD
  GOOGLE
  UNKNOWN
}

enum OauthProfile {
  GOOGLE
}

enum PricingModel {
  ONE_TIME
  HOURLY
  WEEKLY
  DAILY
  MONTHLY
  PER_UNIT
  HYBRID
}

enum Role {
  USER
  ADMIN
}

enum Status {
  CREATED
  DISCOVERY
  REJECTED
  ADVANCE_DUE
  ONGOING
  FIRST_REVIEW_DUE
  FIRST_CHANGES_ONGOING
  SECOND_REVIEW_DUE
  SECOND_CHANGES_ONGOING
  BALANCE_DUE
  COMPLETED
}

enum ResourceType {
  PRODUCT
  SERVICE
}

// v2 - Include portfolio

model Currency {
  id            String    @id @default(cuid())
  name          String
  shortform     String
  symbol        String
  inrConversion Int
  isDisabled    Boolean?
  variants      Variant[]
  createdBy     User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model User {
  id                String           @id @default(cuid())
  email             String           @unique
  firstName         String
  lastName          String
  phoneNumber       String?
  role              Role             @default(USER)
  organisation      String?
  orgRole           String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdResource   Resource[]
  password          String?
  oAuthProfile      OauthProfile?
  Session           Session[]
  requestedServices ServiceRequest[]
  clients           User[]           @relation("Client to solopreneur mapping")
  solopreneur       User?            @relation("Client to solopreneur mapping", fields: [solopreneurId], references: [id], onDelete: Cascade)
  solopreneurId     String?
  adminCredentials  String?
  userSlots         Slot[]           @relation("User to slot mapping")
  adminSlots        Slot[]           @relation("Admin to slot mapping")
  currencies        Currency[]
  feedbacks         Feedback[]       @relation("User to feedback mapping")
  feedbacksVerified Feedback[]       @relation("Verified feedback to admin mapping")
  categories        Category[]       @relation("Category to Admin mapping")
}

// v2 - Include Products
model Resource {
  id           String       @id @default(cuid())
  createdBy    User         @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String
  title        String
  description  String
  resourceType ResourceType
  variants     Variant[]
  isDisabled   Boolean?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  categoryId   String
  category     Category     @relation("Resource to Category Mapping", fields: [categoryId], references: [id])
}

model Variant {
  id                String           @id @default(cuid())
  resourceId        String
  resource          Resource         @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  title             String
  details           String[]
  price             Float
  currency          Currency         @relation(fields: [currencyId], references: [id])
  requestedBy       ServiceRequest[]
  isDisabled        Boolean?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  currencyId        String
  pricingModel      PricingModel
  unitCount         Int?
  overages          Float?
  includedVariantId String?
  includedVariant   Variant?         @relation("Offers in one variant included in the other", fields: [includedVariantId], references: [id])
  variantIncludedIn Variant[]        @relation("Offers in one variant included in the other")
  feedbacks         Feedback[]       @relation("Feedback to variant mapping")
}

model Session {
  id           String      @id @default(cuid())
  loginSource  LoginSource
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String      @unique
  refreshToken String?     @unique
  createdAt    DateTime    @default(now())
  endsAt       DateTime
  lastActive   DateTime    @updatedAt

  @@unique([userId])
}

model ServiceRequest {
  id          String   @id @default(cuid())
  userId      String
  variantId   String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant     Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  slot        Slot?
  description String?
  subject     String
  isDisabled  Boolean?
  status      Status   @default(CREATED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, variantId])
}

model Slot {
  id                 String          @id @default(cuid())
  userId             String?
  user               User?           @relation("User to slot mapping", fields: [userId], references: [id], onDelete: Cascade)
  hostId             String
  host               User            @relation("Admin to slot mapping", fields: [hostId], references: [id], onDelete: Cascade)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  timestamp          DateTime
  meetingLink        String?
  serviceRequest     ServiceRequest? @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  serviceRequestId   String?         @unique
  calendarEventId    String?
  isCancelled        Boolean?
  cancellationReason String?
  cancelledBy        Role?
}

model Feedback {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation("User to feedback mapping", fields: [userId], references: [id], onDelete: Cascade)
  rating       Int
  testimonial  String
  improvements String[]
  variant      Variant  @relation("Feedback to variant mapping", fields: [variantId], references: [id])
  variantId    String
  isApproved   Boolean?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  verifiedById String
  verifiedBy   User     @relation("Verified feedback to admin mapping", fields: [verifiedById], references: [id])
}

model Category {
  id          String     @id @default(cuid())
  title       String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdById String
  createdBy   User       @relation("Category to Admin mapping", fields: [createdById], references: [id])
  resources   Resource[] @relation("Resource to Category Mapping")
  isDisabled  Boolean?
}
